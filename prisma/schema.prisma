// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users{
  id                String @id @default(uuid())
  name              String
  email             String @unique
  password          String
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  CollectUser       CollectUser? @relation(fields: [collectUser_id], references: [id])
  collectUser_id    String?
  TwoFactors        TwoFactors[]
}

model CollectUser{
  id                String @id @default(uuid())
  name              String
  cpfCnpj           String   @unique
  phone             String
  description       String
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  users             Users[]
  collectPoint      CollectPoint[]
  workHours         WorkHours[]
}


model CollectPoint{
  id                String @id  @default(uuid())
  name              String
  description       String
  latitude          String
  longitude         String
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  WorkHours         WorkHours? @relation(fields: [workHours_id], references: [id])
  CollectUser       CollectUser? @relation(fields: [collectUser_id], references: [id])
  collectUser_id    String?
  workHours_id      String?
}


model Sessions{
  id                String @id  @default(uuid())
  token             String @db.VarChar(300)
  expiry            DateTime
  TwoFactors        TwoFactors? @relation(fields: [twofactors_id], references: [id])
  twofactors_id     String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
}

model WorkHours{
  id                String @id  @default(uuid())
  BMD_first         String //BMD = Before MidDay or pt-br(Antes do Meio Dia)
  BMD_second        String
  AMD_first         String//AMD = After MidDay or pt-br(Depois do Meio Dia)
  AMD_second        String
  comments          String
  week_days         String
  collectUser_id    String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  CollectPoint      CollectPoint[]
  CollectUser       CollectUser? @relation(fields: [collectUser_id], references: [id])

}

model TwoFactors{
  id            String @id  @default(uuid())
  Users             Users? @relation(fields: [user_id], references: [id])
  user_id           String?
  OPT               String    //One-Time Password
  verify            Boolean @default(false)
  expiry            DateTime
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  Sessions          Sessions[]
}
